   1: # -*- coding: utf-8 -*-
   2: import os
   3: import json
   4: import re
   5: import urllib.parse as up
   6: from typing import List, Dict, Optional
   7: from pathlib import Path
   8: 
   9: import cloudscraper
  10: from dotenv import load_dotenv
  11: from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton, BotCommand
  12: from telegram.constants import ParseMode
  13: from telegram.ext import Application, CommandHandler, ContextTypes, MessageHandler, CallbackQueryHandler, filters
  14: 
  15: from uefn_scraper.fortnite_gg import FortniteGGCreativeScraper
  16: 
  17: STATE_PATH = "bot_state.json"
  18: SUBS_PATH = "bot_subs.json"
  19: BANNER_URL = os.getenv("BOT_BANNER_URL", "https://fortnite.gg/img/og/creative.png")
  20: LOCAL_BANNER = os.getenv("BOT_BANNER_FILE", "banner.jpg")
  21: 
  22: 
  23: def load_json(path: str, default):
  24:     try:
  25:         with open(path, "r", encoding="utf-8") as f:
  26:             return json.load(f)
  27:     except Exception:
  28:         return default
  29: 
  30: 
  31: def save_json(path: str, data):
  32:     try:
  33:         with open(path, "w", encoding="utf-8") as f:
  34:             json.dump(data, f, ensure_ascii=False, indent=2)
  35:     except Exception:
  36:         pass
  37: 
  38: 
  39: STATE: Dict[str, Dict[str, object]] = load_json(STATE_PATH, {})
  40: SUBS: Dict[str, Dict[str, list]] = load_json(SUBS_PATH, {})
  41: 
  42: 
  43: def chat_settings(chat_id: int) -> Dict[str, object]:
  44:     key = str(chat_id)
  45:     if key not in STATE:
  46:         STATE[key] = {"hide_epic": True, "last_msg_id": None}
  47:         save_json(STATE_PATH, STATE)
  48:     return STATE[key]  # type: ignore
  49: 
  50: 
  51: def set_setting(chat_id: int, key: str, value: object) -> None:
  52:     s = chat_settings(chat_id)
  53:     s[key] = value
  54:     save_json(STATE_PATH, STATE)
  55: 
  56: 
  57: def subs_bucket(chat_id: int):
  58:     key = str(chat_id)
  59:     if key not in SUBS:
  60:         SUBS[key] = {"maps": [], "creators": []}
  61:         save_json(SUBS_PATH, SUBS)
  62:     if "maps" not in SUBS[key]:
  63:         SUBS[key]["maps"] = []
  64:     if "creators" not in SUBS[key]:
  65:         SUBS[key]["creators"] = []
  66:     return SUBS[key]
  67: 
  68: 
  69: def add_map_sub(chat_id: int, code: str, thr: int):
  70:     b = subs_bucket(chat_id)["maps"]
  71:     for s in b:
  72:         if s.get("code") == code:
  73:             s.update({"threshold": thr, "last_players": None})
  74:             save_json(SUBS_PATH, SUBS)
  75:             return
  76:     b.append({"code": code, "threshold": thr, "last_players": None})
  77:     save_json(SUBS_PATH, SUBS)
  78: 
  79: 
  80: def remove_map_sub(chat_id: int, code: str) -> bool:
  81:     b = subs_bucket(chat_id)["maps"]
  82:     before = len(b)
  83:     b[:] = [s for s in b if s.get("code") != code]
  84:     save_json(SUBS_PATH, SUBS)
  85:     return len(b) < before
  86: 
  87: 
  88: def add_creator_sub(chat_id: int, name: str, thr: int):
  89:     b = subs_bucket(chat_id)["creators"]
  90:     for s in b:
  91:         if s.get("name") == name:
  92:             s.update({"threshold": thr, "last_players": None})
  93:             save_json(SUBS_PATH, SUBS)
  94:             return
  95:     b.append({"name": name, "threshold": thr, "last_players": None})
  96:     save_json(SUBS_PATH, SUBS)
  97: 
  98: 
  99: def remove_creator_sub(chat_id: int, name: str) -> bool:
 100:     b = subs_bucket(chat_id)["creators"]
 101:     before = len(b)
 102:     b[:] = [s for s in b if s.get("name") != name]
 103:     save_json(SUBS_PATH, SUBS)
 104:     return len(b) < before
 105: 
 106: 
 107: def esc(s: Optional[str]) -> str:
 108:     return (s or "").replace("&", "&amp;").replace("<", "&lt;").replace(">", "&gt;")
 109: 
 110: 
 111: def format_list_items(items, limit: int = 10) -> List[str]:
 112:     out = []
 113:     for it in items[:limit]:
 114:         title = esc(it.title)
 115:         code = esc(it.code)
 116:         now_ = it.players_now or 0
 117:         peak = it.all_time_peak or 0
 118:         href = esc(it.href)
 119:         out.append(
 120:             f"<b>#{it.rank or ''}</b> • <a href='{href}'>{title}</a>\n"
 121:             f"<code>{code or ''}</code>\n"
 122:             f"👥 Now: <b>{now_}</b>   🔺 Peak: <b>{peak}</b>   ▶️ 24h Plays: {esc(it.plays_24h)}"
 123:         )
 124:     return out
 125: 
 126: 
 127: # -------- Single-post helpers --------
 128: def _get_last_msg(chat_id: int) -> Optional[int]:
 129:     s = chat_settings(chat_id)
 130:     return s.get("last_msg_id") if isinstance(s.get("last_msg_id"), int) else None
 131: 
 132: 
 133: def _set_last_msg(chat_id: int, msg_id: int) -> None:
 134:     set_setting(chat_id, "last_msg_id", msg_id)
 135: 
 136: 
 137: def home_kb() -> InlineKeyboardMarkup:
 138:     return InlineKeyboardMarkup([[InlineKeyboardButton("🏠 Главная", callback_data="nav_home")]])
 139: 
 140: 
 141: async def send_one(target_message, *, text: str, reply_markup=None, parse_mode=ParseMode.HTML, photo: Optional[str] = None):
 142:     chat = target_message.chat
 143:     bot = target_message.get_bot()
 144:     chat_id = chat.id
 145:     last_id = _get_last_msg(chat_id)
 146:     if last_id:
 147:         try:
 148:             await bot.delete_message(chat_id=chat_id, message_id=last_id)
 149:         except Exception:
 150:             pass
 151:     try:
 152:         if photo:
 153:             msg = await chat.send_photo(photo=photo, caption=text, parse_mode=parse_mode, reply_markup=reply_markup)
 154:         else:
 155:             msg = await chat.send_message(text=text, parse_mode=parse_mode, disable_web_page_preview=True, reply_markup=reply_markup)
 156:     except Exception:
 157:         msg = await chat.send_message(text=text, parse_mode=parse_mode, disable_web_page_preview=True, reply_markup=reply_markup)
 158:     _set_last_msg(chat_id, msg.message_id)
 159:     return msg
 160: 
 161: 
 162: def get_banner_media() -> Optional[str]:
 163:     """Return a media path/URL to show on the home screen.
 164: 
 165:     Priority:
 166:     1) Local file specified by BOT_BANNER_FILE (default banner.jpg) if exists
 167:     2) Remote URL from BOT_BANNER_URL (default fortnite.gg image)
 168:     """
 169:     try:
 170:         p = Path(LOCAL_BANNER)
 171:         if p.is_file():
 172:             return str(p)
 173:     except Exception:
 174:         pass
 175:     return BANNER_URL
 176: 
 177: 
 178: def _toint(txt: Optional[str]) -> Optional[int]:
 179:     if not txt:
 180:         return None
 181:     ds = re.findall(r"\d+", str(txt).replace(",", ""))
 182:     return int("".join(ds)) if ds else None
 183: 
 184: 
 185: def build_home_kb_dynamic(chat_id: int) -> InlineKeyboardMarkup:
 186:     # Sum of subscribed maps (quick refresh)
 187:     total_my = 0
 188:     try:
 189:         bucket = SUBS.get(str(chat_id), {}).get("maps", [])
 190:         s = FortniteGGCreativeScraper()
 191:         left = 5
 192:         for sub in bucket:
 193:             lp = sub.get("last_players")
 194:             if isinstance(lp, int):
 195:                 total_my += lp
 196:             elif left > 0:
 197:                 try:
 198:                     det = s.fetch_island_details(sub.get("code"))
 199:                     pn = _toint(det.players_now_text) or 0
 200:                     sub["last_players"] = pn
 201:                     total_my += pn
 202:                     left -= 1
 203:                 except Exception:
 204:                     pass
 205:         save_json(SUBS_PATH, SUBS)
 206:     except Exception:
 207:         total_my = None
 208: 
 209:     # global players
 210:     total_global = None
 211:     try:
 212:         sc = cloudscraper.create_scraper(browser={"browser": "chrome", "platform": "windows", "mobile": False})
 213:         r = sc.get("https://fortnite.gg/player-count", timeout=10)
 214:         from bs4 import BeautifulSoup
 215:         soup = BeautifulSoup(r.text, 'lxml')
 216:         plain = ' '.join(soup.stripped_strings)
 217:         m = re.search(r"([0-9][0-9,\.\s]+)\s*PLAYERS\s+RIGHT\s+NOW", plain, flags=re.I)
 218:         if m:
 219:             total_global = _toint(m.group(1))
 220:     except Exception:
 221:         total_global = None
 222: 
 223:     maps_count = len(SUBS.get(str(chat_id), {}).get("maps", []))
 224:     creators_count = len(SUBS.get(str(chat_id), {}).get("creators", []))
 225:     subs_count = maps_count + creators_count
 226: 
 227:     def fmt(n: Optional[int]) -> str:
 228:         if n is None:
 229:             return "?"
 230:         return f"{int(n):,}".replace(",", " ")
 231: 
 232:     sub_label = f"🔔 Подписки ({subs_count})"
 233:     total_label = f"📈 Fortnite: {fmt(total_global)}"
 234: 
 235:     return InlineKeyboardMarkup([
 236:         [InlineKeyboardButton("🔥 Топ 10", callback_data="nav_top:10")],
 237:         [InlineKeyboardButton("🔎 Найти карту", callback_data="start:map"), InlineKeyboardButton("👤 Креатор", callback_data="start:creator")],
 238:         [InlineKeyboardButton(sub_label, callback_data="start:alerts"), InlineKeyboardButton("⚙️ Настройки", callback_data="start:settings")],
 239:         [InlineKeyboardButton(total_label, url="https://fortnite.gg/player-count"), InlineKeyboardButton("❓ Помощь", callback_data="start:help")],
 240:     ])

